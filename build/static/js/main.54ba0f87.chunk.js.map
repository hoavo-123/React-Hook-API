{"version":3,"sources":["redux/constant/PostConstant.jsx","redux/constant/URLConstant.jsx","logo.svg","components/Table.jsx","components/PostList.jsx","redux/constant/UserConstant.jsx","redux/constant/TableName.jsx","services/axiosClient.jsx","services/UserServices.jsx","redux/actions/UserAction.jsx","components/User.jsx","redux/constant/MessageConstant.jsx","components/SignIn.jsx","components/SignUp.jsx","components/DataGrid.jsx","App.js","reportWebVitals.js","redux/reducers/PostReducer.jsx","redux/reducers/UserReducer.jsx","redux/reducers/index.jsx","redux/store.jsx","index.js"],"names":["FETCH_POST_REQUEST","FETCH_POST_SUCCESS","FETCH_POST_ERROR","BASE_URL","styled","div","PostList","FETCH_USER_REQUEST","FETCH_USER_SUCCESS","FETCH_USER_ERROR","POST_USER_REQUEST","POST_USER_SUCCESS","POST_USER_ERROR","USERS","console","log","process","REACT_APP_API_URL","axiosClient","axios","create","baseURL","headers","paramsSerializer","params","queryString","stringify","interceptors","request","use","a","config","response","data","error","userServices","getAll","get","getById","id","url","api","loadUsers","dispatch","type","respone","message","User","ENTER_USER_NAME","SIGN_UP_TITLE","MSG_REQUIRED","SignIn","SignUp","props","useSelector","state","users","marginElement","marginTop","radioStyle","display","useDispatch","useEffect","validationSchema","Yup","shape","username","min","required","email","password","confirmpassword","oneOf","gender","Grid","Paper","style","width","margin","padding","align","Avatar","background","Typography","variant","initialValues","phonenumber","accepttermsandcondition","onSubmit","values","user","post","success","setTimeout","setSubmitting","resetForm","document","getElementById","value","checked","component","as","TextField","name","label","placeholder","fullWidth","helperText","color","FormControl","FormLabel","RadioGroup","aria-label","FormControlLabel","control","Radio","FormHelperText","MuiPhoneNumber","data-cy","defaultCountry","onChange","e","setFieldValue","Checkbox","Button","disabled","isSubmitting","defaultTheme","createMuiTheme","makeStyles","theme","root","border","palette","fontFamily","join","WebkitFontSmoothing","letterSpacing","backgroundColor","borderRight","borderBottom","borderRadius","height","borderColor","position","borderTop","borderLeft","transform","opacity","transition","content","top","left","flexDirection","alignItems","paddingBottom","spacing","minWidth","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","isLoading","PostReducer","action","UserReducer","rootReducer","combineReducers","posts","middleware","thunk","store","createStore","applyMiddleware","ReactDOM","render"],"mappings":"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","file":"static/js/main.54ba0f87.chunk.js","sourcesContent":["export const FETCH_POST_REQUEST = 'FETCH_POST_REQUEST';\r\nexport const FETCH_POST_SUCCESS = 'FETCH_POST_SUCCESS';\r\nexport const FETCH_POST_ERROR = 'FETCH_POST_ERROR';\r\n","export const BASE_URL = 'http://localhost:3000/';","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\nimport styled from 'styled-components'\r\nimport { useTable } from 'react-table'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Styles = styled.div`\r\n  padding: 1rem;\r\n\r\n  table {\r\n    border-spacing: 0;\r\n    border: 1px solid black;\r\n\r\n    tr {\r\n      \r\n      :last-child {\r\n        td {\r\n          border-bottom: 0;\r\n          text-align : left;\r\n        }\r\n      }\r\n    }\r\n\r\n    th,\r\n    td {\r\n      margin: 0;\r\n      padding: 0.5rem;\r\n      border-bottom: 1px solid black;\r\n      border-right: 1px solid black;\r\n\r\n      :last-child {\r\n        border-right: 0;\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nfunction Table({ columns, data }) {\r\n  // Use the state and functions returned from useTable to build your UI\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow\r\n    \r\n  } = useTable({\r\n    columns,\r\n    data,\r\n  })\r\n\r\n  // Render the UI for your table\r\n  return (\r\n    <Styles>\r\n      <table {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map(headerGroup => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map(column => (\r\n                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {rows.map((row, i) => {\r\n            prepareRow(row)\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map(cell => {\r\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                })}\r\n              </tr>\r\n            )\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </Styles>\r\n  )\r\n}\r\n\r\nexport default Table;","import React,{useEffect} from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux'\r\nimport {loadPosts} from '../redux/actions/PostAction';\r\nimport Table from './Table';\r\n\r\nfunction PostList(props) {\r\n    const data = useSelector(state => state.posts.data)\r\n    \r\n    const dispatch = useDispatch();\r\n    useEffect(() =>{\r\n        dispatch(loadPosts());\r\n    },[dispatch]);\r\n   \r\n    const columns = React.useMemo(\r\n        () => [\r\n          {\r\n            Header: 'Name',\r\n            columns: [\r\n              {\r\n                Header: 'ID',\r\n                accessor: 'id',\r\n              },\r\n              {\r\n                Header: 'User ID',\r\n                accessor: 'userId',\r\n              },\r\n              {\r\n                Header: 'Title',\r\n                accessor: 'title',\r\n              },\r\n              {\r\n                Header: 'Body',\r\n                accessor: 'body',\r\n              },\r\n            ],\r\n          },\r\n          \r\n        ],\r\n        []\r\n      )  \r\n    return (\r\n        <Table columns={columns} data={data} />\r\n    );\r\n}\r\n\r\nexport default PostList;","export const FETCH_USER_REQUEST = 'FETCH_USER_REQUEST';\r\nexport const FETCH_USER_SUCCESS = 'FETCH_USER_SUCCESS';\r\nexport const FETCH_USER_ERROR = 'FETCH_USER_ERROR';\r\n\r\nexport const POST_USER_REQUEST = 'POST_USER_REQUEST';\r\nexport const POST_USER_SUCCESS = 'POST_USER_SUCCESS';\r\nexport const POST_USER_ERROR = 'POST_USER_ERROR';","export const USERS = 'users';","// api/axiosClient.js\r\nimport axios from 'axios';\r\nimport queryString from 'query-string';\r\n// Set up default config for http requests here\r\n\r\n// Please have a look at here `https://github.com/axios/axios#request-config` for the full list of configs\r\nconsole.log(process.env.REACT_APP_API_URL)\r\nconst axiosClient = axios.create({\r\n    baseURL: process.env.REACT_APP_API_URL,\r\n    headers: {\r\n        'content-type': 'application/json',\r\n    },\r\n    paramsSerializer: params => queryString.stringify(params),\r\n});\r\n\r\n\r\n\r\naxiosClient.interceptors.request.use(async (config) => {\r\n    // Handle token here ...\r\n    return config;\r\n})\r\naxiosClient.interceptors.response.use((response) => {\r\n    if (response && response.data) {\r\n        return response.data;\r\n    }\r\n    return response;\r\n}, (error) => {\r\n    // Handle errors\r\n    throw error;\r\n});\r\nexport default axiosClient;","import axiosClient from './axiosClient';\r\nimport {USERS} from '../redux/constant/TableName';\r\n\r\nconst userServices = {\r\n    getAll: () =>{\r\n        return axiosClient.get(USERS)\r\n    },\r\n    getById: (id) =>{\r\n        const url = `USERS/${id}`;\r\n        return axiosClient.get(url)\r\n    }\r\n};\r\n\r\nexport default userServices;","import {\r\n    FETCH_USER_REQUEST,\r\n    FETCH_USER_SUCCESS,\r\n    FETCH_USER_ERROR,\r\n    POST_USER_REQUEST,\r\n    POST_USER_SUCCESS,\r\n    POST_USER_ERROR\r\n} from '../constant/UserConstant';\r\n\r\nimport {BASE_URL}  from '../constant/URLConstant';\r\nimport {USERS} from '../constant/TableName';\r\nimport axios from 'axios';\r\nimport userServices from '../../services/UserServices';\r\n\r\nconst api = axios.create({\r\n    baseURL : BASE_URL + USERS\r\n})\r\n\r\nexport const loadUsers = () => async dispatch =>{\r\n    try{\r\n        dispatch({type : FETCH_USER_REQUEST})\r\n\r\n        // const url = BASE_URL;\r\n        // const respone  = await fetch(url + USERS);\r\n        // const responeBody = await respone.json();\r\n\r\n        const respone = await userServices.getAll();\r\n\r\n        dispatch({\r\n            type:FETCH_USER_SUCCESS,\r\n            data: respone\r\n        });\r\n    }catch(error){\r\n        dispatch({\r\n            type : FETCH_USER_ERROR,\r\n            message : error.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const PostUsers = (user) => async dispatch =>{\r\n    try{\r\n        dispatch({type : POST_USER_REQUEST})\r\n\r\n        let post = await api.post(BASE_URL + USERS,user)\r\n        console.log(post)\r\n    \r\n        \r\n        dispatch({\r\n            type:POST_USER_SUCCESS,\r\n            success:true\r\n        });\r\n    }catch(error){\r\n        dispatch({\r\n            type : POST_USER_ERROR,\r\n            message : error.message\r\n        })\r\n    }\r\n}","import React,{useEffect} from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux'\r\nimport {loadUsers} from '../redux/actions/UserAction';\r\nimport Table from './Table';\r\n\r\nfunction User(props) {\r\n    const data = useSelector(state => state.users.data);\r\n    \r\n    const dispatch = useDispatch();\r\n    useEffect(() =>{\r\n        dispatch(loadUsers());\r\n    },[dispatch]);\r\n    \r\n    // const columns = React.useMemo(\r\n    //     () => [\r\n    //       {\r\n    //         Header: null,\r\n    //         columns: [\r\n    //           {\r\n    //             Header: 'ID',\r\n    //             accessor: 'id',\r\n    //           },\r\n    //           {\r\n    //             Header: 'Name',\r\n    //             accessor: 'name',\r\n    //           },\r\n    //           {\r\n    //             Header: 'User Name',\r\n    //             accessor: 'username',\r\n    //           },\r\n    //           {\r\n    //             Header: 'Email',\r\n    //             accessor: 'email',\r\n    //           }\r\n    //         ],\r\n    //       },\r\n          \r\n    //     ],\r\n    //     []\r\n    //   )  \r\n\r\n      const columns = [\r\n        {\r\n            Header: 'ID',\r\n            accessor: 'id'\r\n        },\r\n        {\r\n            Header: 'Name',\r\n            accessor: 'name'\r\n        },\r\n        {\r\n            Header: 'User Name',\r\n            accessor: 'username'\r\n        },\r\n        {\r\n            Header: 'Email',\r\n            accessor: 'email'\r\n        },\r\n        {\r\n            Header: 'Address',\r\n            columns: [\r\n              {\r\n                Header: 'Street',\r\n                accessor: 'address.street',\r\n              },\r\n              {\r\n                Header: 'Suite',\r\n                accessor: 'address.suite',\r\n              },\r\n              {\r\n                Header: 'City',\r\n                accessor: 'address.city',\r\n              },\r\n              {\r\n                Header: 'Zipcode',\r\n                accessor: 'address.zipcode',\r\n              }\r\n            ],\r\n          },\r\n    ];\r\n    \r\n    return (\r\n        <div>\r\n            <Table columns = {columns} data = {data} get/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default User;","//Lable\r\nexport const SIGN_IN = 'Sign In';\r\nexport const ENTER_USER_NAME = 'Enter user name'; \r\nexport const ENTER_PASS_WORD = 'Enter pass word'; \r\nexport const REMEMBER_ME = 'Remember Me'; \r\nexport const FORGOT_PASS_WORD = 'Forgot Password ?'; \r\nexport const QUESTION_PASS_WORD = 'Do you have an account ?';\r\nexport const SIGN_UP = 'Sign Up ?'; \r\nexport const SIGN_UP_TITLE = 'Sign Up';\r\nexport const PLEASE_FILL_SIGN_UP = 'Please fill this form to create an account';\r\nexport const LABEL_SIGN_UP_EMAIL = 'Email';\r\nexport const LABEL_SIGN_UP_USER_NAME = 'Name';\r\nexport const LABEL_SIGN_UP_PHONE_NUMBER = 'Phone Number';\r\nexport const LABEL_SIGN_UP_PASS_WORD = 'Pass word';\r\nexport const LABEL_SIGN_UP_CONFIRM_PASS_WORD = 'Confirm Pass word';\r\nexport const LABEL_ACCEPT_TERMS_CONDITION = 'I accept the terms and conditions';\r\n\r\n//Message\r\nexport const MSG_TOO_SHORT = 'Too short';\r\nexport const MSG_REQUIRED = 'Required';\r\nexport const MSG_INVALID_EMAIL = 'Invalid Email';\r\nexport const MSG_PASSWORD_LENGTH = 'Password should be at least 8 characters';\r\nexport const MSG_CONFIRM_PASSWORD = 'Password not matched';\r\nexport const MSG_LOADING = 'LOADING';","import React from 'react';\r\nimport { Grid, Paper, Avatar , TextField, Checkbox, FormControlLabel, Button, Typography, Link} from '@material-ui/core';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport {SIGN_IN,\r\n    ENTER_USER_NAME,\r\n    ENTER_PASS_WORD,\r\n    REMEMBER_ME,\r\n    FORGOT_PASS_WORD,\r\n    QUESTION_PASS_WORD,\r\n    SIGN_UP\r\n    } from '../redux/constant/MessageConstant'\r\n\r\n\r\nfunction SignIn(props) {\r\n    const PaperStyle = {\r\n        padding : 20,\r\n        height:'73vh',\r\n        width :300,\r\n        margin:\"20px auto\" \r\n    }\r\n\r\n    const avatarStyle = {\r\n        backgroundColor : 'green'\r\n    }\r\n\r\n    const marginElement = {\r\n        margin : '5px 0'\r\n    }\r\n\r\n    return (\r\n        <Grid>\r\n            <Paper style = {PaperStyle}>\r\n                <Grid align = 'center'>\r\n                    <Avatar style = {avatarStyle}><LockOutlinedIcon/></Avatar>\r\n                    <h2>{SIGN_IN}</h2>\r\n                </Grid>\r\n                <TextField label = 'User Name' placeholder = {ENTER_USER_NAME} fullWidth required/>\r\n                <TextField label = 'Pass Word' style = {marginElement} placeholder = {ENTER_PASS_WORD} type = 'password' fullWidth required/>\r\n                <FormControlLabel\r\n                    control={\r\n                    <Checkbox\r\n                        name=\"checkedB\"\r\n                        color=\"primary\"\r\n                    />\r\n                    }\r\n                    label={REMEMBER_ME}\r\n                />\r\n               \r\n                <Button variant=\"contained\" color=\"secondary\" fullWidth style = {marginElement}> {SIGN_IN} </Button>\r\n                \r\n                <Typography  style = {marginElement}>\r\n                    <Link href=\"#\"  fullWidth>\r\n                        {FORGOT_PASS_WORD}\r\n                    </Link>\r\n                </Typography>\r\n                <Typography  style = {marginElement}> {QUESTION_PASS_WORD}\r\n                    <Link href=\"#\"  fullWidth>\r\n                        {SIGN_UP}\r\n                    </Link>\r\n                </Typography>\r\n            </Paper>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default SignIn;","import React from 'react';\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MuiPhoneNumber from \"material-ui-phone-number\";\r\nimport { \r\n    Grid, \r\n    Paper, \r\n    Avatar , \r\n    TextField, \r\n    Checkbox, \r\n    FormControlLabel, \r\n    Button, \r\n    Typography, \r\n    FormLabel, \r\n    RadioGroup, \r\n    Radio,\r\n    FormControl, FormHelperText} from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport {\r\n    ENTER_USER_NAME,\r\n    SIGN_UP_TITLE,\r\n    PLEASE_FILL_SIGN_UP,\r\n    LABEL_SIGN_UP_EMAIL,\r\n    LABEL_SIGN_UP_USER_NAME,\r\n    LABEL_SIGN_UP_PASS_WORD,\r\n    LABEL_SIGN_UP_CONFIRM_PASS_WORD,\r\n    LABEL_ACCEPT_TERMS_CONDITION,\r\n    MSG_PASSWORD_LENGTH, MSG_REQUIRED, MSG_CONFIRM_PASSWORD, MSG_TOO_SHORT, MSG_INVALID_EMAIL, MSG_LOADING\r\n    } from '../redux/constant/MessageConstant'\r\nimport { useState, useEffect } from 'react';\r\nimport {PostUsers, loadUsers} from '../redux/actions/UserAction'\r\nimport {useSelector, useDispatch} from 'react-redux'\r\n\r\nfunction SignUp(props) {\r\n    const data = useSelector(state => state.users.data)\r\n    console.log(data)\r\n\r\n\r\n    const paperStyle = {\r\n        width : 300,\r\n        margin : '20px auto',\r\n        padding: '20px 30px'\r\n    }\r\n    \r\n    const headerStyle = {\r\n        marginTop : 0\r\n    }\r\n\r\n    const avatarStyle = {\r\n        background : 'green'\r\n    }\r\n\r\n    const marginElement = {\r\n        marginTop : 5\r\n    }\r\n\r\n    const radioStyle = {\r\n        display: 'inline'\r\n    }\r\n\r\n    const initialvalue = {\r\n        username : '',\r\n        email : '',\r\n        gender : '',\r\n        phonenumber : '',\r\n        password : '',\r\n        confirmpassword: '',\r\n        accepttermsandcondition : false\r\n    }\r\n    const dispatch = useDispatch();\r\n    \r\n    const handleSubmit = (values, props) => {\r\n        dispatch(PostUsers(values))\r\n\r\n        setTimeout(() => {\r\n            props.setSubmitting(false);\r\n            props.resetForm(false)\r\n            resetPhoneNumber()\r\n        }, 2000);\r\n    }\r\n\r\n    useEffect(() =>{\r\n        dispatch(loadUsers());\r\n    },[dispatch]);\r\n\r\n    function resetPhoneNumber(){\r\n        document.getElementById(\"123\").value = \"84+\";  \r\n        document.getElementById(\"TermsCondition\").checked = false;  \r\n    }\r\n\r\n    // function handleCheck(e){\r\n    //     setChecked(!e.target.checked);\r\n    // }\r\n\r\n   \r\n\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        username:Yup.string().min(3,MSG_TOO_SHORT).required(MSG_REQUIRED),\r\n        email:Yup.string().email(MSG_INVALID_EMAIL).required(MSG_REQUIRED),\r\n        password:Yup.string().min(3,MSG_PASSWORD_LENGTH).required(MSG_REQUIRED),\r\n        confirmpassword:Yup.string().oneOf([Yup.ref('password')],MSG_CONFIRM_PASSWORD).required(MSG_REQUIRED),\r\n        gender:Yup.string().oneOf([\"male\",\"female\"]).required(MSG_REQUIRED),\r\n        // accepttermsandcondition:Yup.string().oneOf([\"true\"]).required(MSG_REQUIRED)\r\n    });\r\n \r\n    return (\r\n        <Grid>\r\n            <Paper style={paperStyle}>\r\n                <Grid align='center'>\r\n                    <Avatar style={avatarStyle}><AddIcon /></Avatar>\r\n                    <h2>{SIGN_UP_TITLE}</h2>\r\n                    <Typography variant=\"caption\" style={headerStyle}>{PLEASE_FILL_SIGN_UP}</Typography>\r\n                </Grid>\r\n                <Formik\r\n                    initialValues={initialvalue}\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={handleSubmit}\r\n                >\r\n                    {(props) => (\r\n                        <Form component =\"div\">\r\n                            <Field as={TextField}\r\n                                name=\"username\"\r\n                                label={LABEL_SIGN_UP_USER_NAME}\r\n                                style={marginElement}\r\n                                placeholder={ENTER_USER_NAME}\r\n                                fullWidth\r\n                                helperText={<ErrorMessage name=\"username\" component=\"span\" style={{ color: \"red\" }} />}\r\n                            />\r\n                            \r\n                            <Field as={TextField}\r\n                                name=\"email\"\r\n                                label={LABEL_SIGN_UP_EMAIL}\r\n                                style={marginElement}\r\n                                placeholder={ENTER_USER_NAME}\r\n                                fullWidth \r\n                                helperText={<ErrorMessage name=\"email\" component=\"span\" style={{ color: \"red\" }} />}\r\n                            />\r\n\r\n                            <FormControl component=\"fieldset\" style={marginElement}>\r\n                                <FormLabel component=\"legend\" >Gender</FormLabel>\r\n                                <Field as={RadioGroup}\r\n                                    aria-label=\"gender\"\r\n                                    name=\"gender\"\r\n                                    style={radioStyle} >\r\n                                    <FormControlLabel value=\"female\" control={<Radio />} label=\"Female\" />\r\n                                    <FormControlLabel value=\"male\" control={<Radio />} label=\"Male\" />\r\n                                </Field>\r\n                            </FormControl>\r\n                            <FormHelperText><ErrorMessage name=\"gender\" component=\"span\" style={{ color: \"red\" }} /></FormHelperText>\r\n\r\n                            <Field component={MuiPhoneNumber}\r\n                                name=\"phonenumber\"\r\n                                id=\"123\"\r\n                                label=\"Phone Number\"\r\n                                data-cy=\"user-phone\"\r\n                                defaultCountry={\"vn\"}\r\n                                fullWidth\r\n                                onChange={e => props.setFieldValue(\"phonenumber\", e)}\r\n                            />\r\n\r\n                            <Field as={TextField}\r\n                                name=\"password\"\r\n                                type='password'\r\n                                label={LABEL_SIGN_UP_PASS_WORD}\r\n                                style={marginElement}\r\n                                placeholder={ENTER_USER_NAME}\r\n                                fullWidth\r\n                                helperText={<ErrorMessage name=\"password\" component=\"span\" style={{ color: \"red\" }} />}\r\n                            />\r\n                            \r\n                            <Field as={TextField}\r\n                                name='confirmpassword'\r\n                                type='password'\r\n                                label={LABEL_SIGN_UP_CONFIRM_PASS_WORD}\r\n                                style={marginElement}\r\n                                placeholder={ENTER_USER_NAME}\r\n                                fullWidth \r\n                                helperText={<ErrorMessage name=\"confirmpassword\" component=\"span\" style={{ color: \"red\" }} />}\r\n                            />\r\n\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Field as={Checkbox}\r\n                                        // checked={checked}\r\n                                        // onChange={handleCheck}\r\n                                        id=\"TermsCondition\"\r\n                                        name=\"accepttermsandcondition\"\r\n                                        color=\"primary\"\r\n                                    />\r\n                                }\r\n                                label={LABEL_ACCEPT_TERMS_CONDITION}\r\n                            />\r\n                            <FormHelperText><ErrorMessage name=\"accepttermsandcondition\" component=\"span\" style={{ color: \"red\" }} /></FormHelperText>\r\n\r\n                            <Button type=\"submit\"\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                disabled={props.isSubmitting}\r\n                            >\r\n                                {props.isSubmitting ? MSG_LOADING : SIGN_UP_TITLE}\r\n                            </Button>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </Paper>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default SignUp;","import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { XGrid, GridToolbar } from '@material-ui/x-grid';\r\nimport { useDemoData } from '@material-ui/x-grid-data-generator';\r\nimport KeyboardArrowRightIcon from '@material-ui/icons/KeyboardArrowRight';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport Button from '@material-ui/core/Button';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst defaultTheme = createMuiTheme();\r\nconst useStylesAntDesign = makeStyles(\r\n  (theme) => ({\r\n    root: {\r\n      border: `1px solid ${theme.palette.type === 'light' ? '#f0f0f0' : '#303030'}`,\r\n      color:\r\n        theme.palette.type === 'light'\r\n          ? 'rgba(0,0,0,.85)'\r\n          : 'rgba(255,255,255,0.85)',\r\n      fontFamily: [\r\n        '-apple-system',\r\n        'BlinkMacSystemFont',\r\n        '\"Segoe UI\"',\r\n        'Roboto',\r\n        '\"Helvetica Neue\"',\r\n        'Arial',\r\n        'sans-serif',\r\n        '\"Apple Color Emoji\"',\r\n        '\"Segoe UI Emoji\"',\r\n        '\"Segoe UI Symbol\"',\r\n      ].join(','),\r\n      WebkitFontSmoothing: 'auto',\r\n      letterSpacing: 'normal',\r\n      '& .MuiDataGrid-columnsContainer': {\r\n        backgroundColor: theme.palette.type === 'light' ? '#fafafa' : '#1d1d1d',\r\n      },\r\n      '& .MuiDataGrid-iconSeparator': {\r\n        display: 'none',\r\n      },\r\n      '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n        borderRight: `1px solid ${\r\n          theme.palette.type === 'light' ? '#f0f0f0' : '#303030'\r\n        }`,\r\n      },\r\n      '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n        borderBottom: `1px solid ${\r\n          theme.palette.type === 'light' ? '#f0f0f0' : '#303030'\r\n        }`,\r\n      },\r\n      '& .MuiDataGrid-cell': {\r\n        color:\r\n          theme.palette.type === 'light'\r\n            ? 'rgba(0,0,0,.85)'\r\n            : 'rgba(255,255,255,0.85)',\r\n        fontFamily: [\r\n          '-apple-system',\r\n          'BlinkMacSystemFont',\r\n          '\"Segoe UI\"',\r\n          'Roboto',\r\n          '\"Helvetica Neue\"',\r\n          'Arial',\r\n          'sans-serif',\r\n          '\"Apple Color Emoji\"',\r\n          '\"Segoe UI Emoji\"',\r\n          '\"Segoe UI Symbol\"',\r\n        ].join(','),\r\n        WebkitFontSmoothing: 'auto',\r\n        letterSpacing: 'normal',\r\n        '& .MuiDataGrid-columnsContainer': {\r\n          backgroundColor: theme.palette.type === 'light' ? '#fafafa' : '#1d1d1d',\r\n        },\r\n        '& .MuiDataGrid-iconSeparator': {\r\n          display: 'none',\r\n        },\r\n        '& .MuiDataGrid-colCell, .MuiDataGrid-cell': {\r\n          borderRight: `1px solid ${\r\n            theme.palette.type === 'light' ? '#f0f0f0' : '#303030'\r\n          }`,\r\n        },\r\n        '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n          borderBottom: `1px solid ${\r\n            theme.palette.type === 'light' ? '#f0f0f0' : '#303030'\r\n          }`,\r\n        },\r\n        '& .MuiDataGrid-cell': {\r\n          color:\r\n            theme.palette.type === 'light'\r\n              ? 'rgba(0,0,0,.85)'\r\n              : 'rgba(255,255,255,0.65)',\r\n        },\r\n        '& .MuiPaginationItem-root': {\r\n          borderRadius: 0,\r\n        },\r\n        '& .MuiCheckbox-root svg': {\r\n          width: 16,\r\n          height: 16,\r\n          backgroundColor: 'transparent',\r\n          border: `1px solid ${\r\n            theme.palette.type === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'\r\n          }`,\r\n          borderRadius: 2,\r\n        },\r\n        '& .MuiCheckbox-root svg path': {\r\n          display: 'none',\r\n        },\r\n        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n          backgroundColor: '#1890ff',\r\n          borderColor: '#1890ff',\r\n        },\r\n        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n          position: 'absolute',\r\n          display: 'table',\r\n          border: '2px solid #fff',\r\n          borderTop: 0,\r\n          borderLeft: 0,\r\n          transform: 'rotate(45deg) translate(-50%,-50%)',\r\n          opacity: 1,\r\n          transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n          content: '\"\"',\r\n          top: '50%',\r\n          left: '39%',\r\n          width: 5.71428571,\r\n          height: 9.14285714,\r\n        },\r\n        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n          width: 8,\r\n          height: 8,\r\n          backgroundColor: '#1890ff',\r\n          transform: 'none',\r\n          top: '39%',\r\n          border: 0,\r\n        },\r\n      },\r\n    },\r\n  }),\r\n  { defaultTheme },\r\n);\r\n\r\nconst useStyles = makeStyles(\r\n  (theme) => ({\r\n    root: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      height: 600,\r\n      width: '100%',\r\n      '& .MuiFormGroup-options': {\r\n        alignItems: 'center',\r\n        paddingBottom: theme.spacing(1),\r\n        '& > div': {\r\n          minWidth: 100,\r\n          margin: theme.spacing(2, 2, 2, 0),\r\n        },\r\n      },\r\n    },\r\n  }),\r\n  { defaultTheme },\r\n);\r\n\r\nfunction SettingsPanel(props) {\r\n  const { onApply, type, size, theme } = props;\r\n  const [sizeState, setSize] = React.useState(size);\r\n  const [typeState, setType] = React.useState(type);\r\n  const [selectedPaginationValue, setSelectedPaginationValue] = React.useState(-1);\r\n  const [activeTheme, setActiveTheme] = React.useState(theme);\r\n\r\n  const handleSizeChange = React.useCallback((event) => {\r\n    setSize(Number(event.target.value));\r\n  }, []);\r\n\r\n  const handleDatasetChange = React.useCallback((event) => {\r\n    setType(event.target.value);\r\n  }, []);\r\n\r\n  const handlePaginationChange = React.useCallback((event) => {\r\n    setSelectedPaginationValue(event.target.value);\r\n  }, []);\r\n\r\n  const handleThemeChange = React.useCallback((event) => {\r\n    setActiveTheme(event.target.value);\r\n  }, []);\r\n\r\n  const handleApplyChanges = React.useCallback(() => {\r\n    onApply({\r\n      size: sizeState,\r\n      type: typeState,\r\n      pagesize: selectedPaginationValue,\r\n      theme: activeTheme,\r\n    });\r\n  }, [sizeState, typeState, selectedPaginationValue, activeTheme, onApply]);\r\n\r\n  return (\r\n    <FormGroup className=\"MuiFormGroup-options\" row>\r\n      <FormControl variant=\"standard\">\r\n        <InputLabel>Dataset</InputLabel>\r\n        <Select value={typeState} onChange={handleDatasetChange}>\r\n          <MenuItem value=\"Employee\">Employee</MenuItem>\r\n          <MenuItem value=\"Commodity\">Commodity</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n      <FormControl variant=\"standard\">\r\n        <InputLabel>Rows</InputLabel>\r\n        <Select value={sizeState} onChange={handleSizeChange}>\r\n          <MenuItem value={100}>100</MenuItem>\r\n          <MenuItem value={1000}>{Number(1000).toLocaleString()}</MenuItem>\r\n          <MenuItem value={10000}>{Number(10000).toLocaleString()}</MenuItem>\r\n          <MenuItem value={100000}>{Number(100000).toLocaleString()}</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n      <FormControl variant=\"standard\">\r\n        <InputLabel>Page Size</InputLabel>\r\n        <Select value={selectedPaginationValue} onChange={handlePaginationChange}>\r\n          <MenuItem value={-1}>off</MenuItem>\r\n          <MenuItem value={0}>auto</MenuItem>\r\n          <MenuItem value={25}>25</MenuItem>\r\n          <MenuItem value={100}>100</MenuItem>\r\n          <MenuItem value={1000}>{Number(1000).toLocaleString()}</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n      <FormControl variant=\"standard\">\r\n        <InputLabel>Theme</InputLabel>\r\n        <Select value={activeTheme} onChange={handleThemeChange}>\r\n          <MenuItem value=\"default\">Default Theme</MenuItem>\r\n          <MenuItem value=\"ant\">Ant Design</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n      <Button\r\n        size=\"small\"\r\n        variant=\"outlined\"\r\n        color=\"primary\"\r\n        onClick={handleApplyChanges}\r\n      >\r\n        <KeyboardArrowRightIcon fontSize=\"small\" /> Apply\r\n      </Button>\r\n    </FormGroup>\r\n  );\r\n}\r\n\r\nSettingsPanel.propTypes = {\r\n  onApply: PropTypes.func.isRequired,\r\n  size: PropTypes.number.isRequired,\r\n  theme: PropTypes.oneOf(['ant', 'default']).isRequired,\r\n  type: PropTypes.oneOf(['Commodity', 'Employee']).isRequired,\r\n};\r\n\r\nexport default function FullFeaturedDemo() {\r\n  const classes = useStyles();\r\n  const antDesignClasses = useStylesAntDesign();\r\n  const [isAntDesign, setIsAntDesign] = React.useState(false);\r\n  const [type, setType] = React.useState('Commodity');\r\n  const [size, setSize] = React.useState(100);\r\n  const { loading, data, setRowLength, loadNewData } = useDemoData({\r\n    dataSet: type,\r\n    rowLength: size,\r\n    maxColumns: 40,\r\n    editable: true,\r\n  });\r\n  console.log(data)\r\n  const [pagination, setPagination] = React.useState({\r\n    pagination: false,\r\n    autoPageSize: false,\r\n    pageSize: undefined,\r\n  });\r\n\r\n  const getActiveTheme = () => {\r\n    return isAntDesign ? 'ant' : 'default';\r\n  };\r\n\r\n  const handleApplyClick = (settings) => {\r\n    if (size !== settings.size) {\r\n      setSize(settings.size);\r\n    }\r\n\r\n    if (type !== settings.type) {\r\n      setType(settings.type);\r\n    }\r\n\r\n    if (getActiveTheme() !== settings.theme) {\r\n      setIsAntDesign(!isAntDesign);\r\n    }\r\n\r\n    if (size !== settings.size || type !== settings.type) {\r\n      setRowLength(settings.size);\r\n      loadNewData();\r\n    }\r\n\r\n    const newPaginationSettings = {\r\n      pagination: settings.pagesize !== -1,\r\n      autoPageSize: settings.pagesize === 0,\r\n      pageSize: settings.pagesize > 0 ? settings.pagesize : undefined,\r\n    };\r\n\r\n    setPagination((currentPaginationSettings) => {\r\n      if (\r\n        currentPaginationSettings.pagination === newPaginationSettings.pagination &&\r\n        currentPaginationSettings.autoPageSize ===\r\n          newPaginationSettings.autoPageSize &&\r\n        currentPaginationSettings.pageSize === newPaginationSettings.pageSize\r\n      ) {\r\n        return currentPaginationSettings;\r\n      }\r\n      return newPaginationSettings;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <SettingsPanel\r\n        onApply={handleApplyClick}\r\n        size={size}\r\n        type={type}\r\n        theme={getActiveTheme()}\r\n      />\r\n      <XGrid\r\n        className={isAntDesign ? antDesignClasses.root : undefined}\r\n        {...data}\r\n        components={{\r\n          Toolbar: GridToolbar,\r\n        }}\r\n        loading={loading}\r\n        checkboxSelection\r\n        disableSelectionOnClick\r\n        {...pagination}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, {useEffect} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {loadPosts} from './redux/actions/PostAction';\nimport logo from './logo.svg';\nimport './App.css';\nimport PostList  from './components/PostList';\nimport User  from './components/User';\nimport SignIn from './components/SignIn';\nimport SignUp from './components/SignUp';\nimport DataGridDemo from './components/DataGrid';\nimport ComboBox from './components/AutoComplete';\n\nfunction App() {\n  // const data = useSelector(state => state.posts.data);\n  // const isLoading = useSelector(state => state.posts.isLoading);\n\n  // const dispatch = useDispatch();\n  // useEffect(() =>{\n  //   dispatch(loadPosts());\n  // },[dispatch]);\n  \n  return (\n    <div className=\"App\">\n      {/* <PostList /> */}\n      {/* <User/> */}\n      <SignUp/>\n      {/* <SignInOutContainer/> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\r\n    FETCH_POST_REQUEST, \r\n    FETCH_POST_SUCCESS, \r\n    FETCH_POST_ERROR\r\n} from '../constant/PostConstant'\r\n\r\nconst initialState = {\r\n    isLoading : false,\r\n    success : false,\r\n    message : null,\r\n    data : []\r\n}\r\n\r\nfunction PostReducer (state = initialState, action){\r\n    switch(action.type){\r\n        case FETCH_POST_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoading : true\r\n            };\r\n        case FETCH_POST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoading:false,\r\n                success : true,\r\n                data:action.data\r\n            };\r\n        case FETCH_POST_ERROR:\r\n            return {\r\n                ...state,\r\n                isLoading:false,\r\n                success:false,\r\n                message:action.message\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default PostReducer;","import {\r\n    FETCH_USER_REQUEST,\r\n    FETCH_USER_SUCCESS,\r\n    FETCH_USER_ERROR,\r\n    POST_USER_REQUEST,\r\n    POST_USER_SUCCESS,\r\n    POST_USER_ERROR\r\n} from '../constant/UserConstant';\r\n\r\nconst initialState = {\r\n    isLoading : false,\r\n    success : false,\r\n    message : null,\r\n    data : []\r\n}\r\n\r\nfunction UserReducer (state = initialState, action){\r\n    switch(action.type){\r\n        case FETCH_USER_REQUEST:\r\n            return{\r\n                ...state,\r\n                isLoading : true,\r\n            }\r\n        case FETCH_USER_SUCCESS:\r\n            return{\r\n                ...state,\r\n                isLoading:false,\r\n                success:true,\r\n                data:action.data //action.data\r\n            }\r\n        case FETCH_USER_ERROR:\r\n            return{\r\n                ...state,\r\n                isLoading:false,\r\n                message:action.message,\r\n                data:[]\r\n            }\r\n        case POST_USER_REQUEST:\r\n            return{\r\n                ...state,\r\n                isLoading:true,\r\n            }\r\n        case POST_USER_SUCCESS:\r\n            console.log(action.data)\r\n            // const setUser = window.localStorage.setItem('USER',JSON.stringify(action.data));\r\n            \r\n            // window.localStorage.setItem('USER',action.data)\r\n            return{\r\n                ...state,\r\n                isLoading:false,\r\n                success:true\r\n            }\r\n        case POST_USER_ERROR:\r\n                return{\r\n                    ...state,\r\n                    isLoading:false,\r\n                    success:false,\r\n                    message:action.message,\r\n                }\r\n        default:\r\n            return state;\r\n    \r\n    }\r\n}\r\nexport default UserReducer;\r\n","\r\nimport {combineReducers} from 'redux';\r\nimport PostReducer from './PostReducer';\r\nimport UserReducer from './UserReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    posts : PostReducer,\r\n    users : UserReducer\r\n})\r\n\r\nexport default rootReducer;","import {createStore, applyMiddleware} from 'redux';\r\nimport {createLogger} from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/index';\r\n\r\nconst middleware = [thunk];\r\n\r\nif(process.env.NODE_ENV !== \"production\"){\r\n    middleware.push(createLogger());\r\n}\r\nexport const store = createStore(\r\n    rootReducer,\r\n    applyMiddleware(...middleware)\r\n);\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {store} from './redux/store';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n  <Provider store = {store}>\n     <App />\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}